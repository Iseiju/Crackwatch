//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 3 storyboards.
  struct storyboard {
    /// Storyboard `Landing`.
    static let landing = _R.storyboard.landing()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Landing", bundle: ...)`
    static func landing(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.landing)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 5 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `backgroundColor`.
    static let backgroundColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "backgroundColor")
    /// Color `cracked`.
    static let cracked = Rswift.ColorResource(bundle: R.hostingBundle, name: "cracked")
    /// Color `uncracked`.
    static let uncracked = Rswift.ColorResource(bundle: R.hostingBundle, name: "uncracked")
    /// Color `unreleased`.
    static let unreleased = Rswift.ColorResource(bundle: R.hostingBundle, name: "unreleased")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "backgroundColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func backgroundColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.backgroundColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "cracked", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func cracked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.cracked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "uncracked", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func uncracked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.uncracked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "unreleased", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func unreleased(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.unreleased, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 5 images.
  struct image {
    /// Image `ic-cracked`.
    static let icCracked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-cracked")
    /// Image `ic-crackwatch`.
    static let icCrackwatch = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-crackwatch")
    /// Image `ic-menu`.
    static let icMenu = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-menu")
    /// Image `ic-uncracked`.
    static let icUncracked = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-uncracked")
    /// Image `ic-unreleased`.
    static let icUnreleased = Rswift.ImageResource(bundle: R.hostingBundle, name: "ic-unreleased")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-cracked", bundle: ..., traitCollection: ...)`
    static func icCracked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCracked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-crackwatch", bundle: ..., traitCollection: ...)`
    static func icCrackwatch(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icCrackwatch, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-menu", bundle: ..., traitCollection: ...)`
    static func icMenu(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icMenu, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-uncracked", bundle: ..., traitCollection: ...)`
    static func icUncracked(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icUncracked, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "ic-unreleased", bundle: ..., traitCollection: ...)`
    static func icUnreleased(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.icUnreleased, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `CollectionCell`.
    static let collectionCell = _R.nib._CollectionCell()
    /// Nib `ExpandedGameCell`.
    static let expandedGameCell = _R.nib._ExpandedGameCell()
    /// Nib `GameCell`.
    static let gameCell = _R.nib._GameCell()
    /// Nib `HeaderCell`.
    static let headerCell = _R.nib._HeaderCell()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CollectionCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.collectionCell) instead")
    static func collectionCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.collectionCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "ExpandedGameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.expandedGameCell) instead")
    static func expandedGameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.expandedGameCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "GameCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.gameCell) instead")
    static func gameCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.gameCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "HeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.headerCell) instead")
    static func headerCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.headerCell)
    }
    #endif

    static func collectionCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionCell? {
      return R.nib.collectionCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionCell
    }

    static func expandedGameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandedGameCell? {
      return R.nib.expandedGameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandedGameCell
    }

    static func gameCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameCell? {
      return R.nib.gameCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameCell
    }

    static func headerCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HeaderCell? {
      return R.nib.headerCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCell
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `CollectionCell`.
    static let collectionCell: Rswift.ReuseIdentifier<CollectionCell> = Rswift.ReuseIdentifier(identifier: "CollectionCell")
    /// Reuse identifier `ExpandedGameCell`.
    static let expandedGameCell: Rswift.ReuseIdentifier<ExpandedGameCell> = Rswift.ReuseIdentifier(identifier: "ExpandedGameCell")
    /// Reuse identifier `GameCell`.
    static let gameCell: Rswift.ReuseIdentifier<GameCell> = Rswift.ReuseIdentifier(identifier: "GameCell")
    /// Reuse identifier `HeaderCell`.
    static let headerCell: Rswift.ReuseIdentifier<HeaderCell> = Rswift.ReuseIdentifier(identifier: "HeaderCell")

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try nib.validate()
    #endif
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib: Rswift.Validatable {
    static func validate() throws {
      try _ExpandedGameCell.validate()
    }

    struct _CollectionCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CollectionCell

      let bundle = R.hostingBundle
      let identifier = "CollectionCell"
      let name = "CollectionCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CollectionCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CollectionCell
      }

      fileprivate init() {}
    }

    struct _ExpandedGameCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType, Rswift.Validatable {
      typealias ReusableType = ExpandedGameCell

      let bundle = R.hostingBundle
      let identifier = "ExpandedGameCell"
      let name = "ExpandedGameCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> ExpandedGameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? ExpandedGameCell
      }

      static func validate() throws {
        if UIKit.UIImage(named: "ic-cracked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-cracked' is used in nib 'ExpandedGameCell', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "cracked", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'cracked' is used in storyboard 'ExpandedGameCell', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }

    struct _GameCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = GameCell

      let bundle = R.hostingBundle
      let identifier = "GameCell"
      let name = "GameCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> GameCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? GameCell
      }

      fileprivate init() {}
    }

    struct _HeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = HeaderCell

      let bundle = R.hostingBundle
      let identifier = "HeaderCell"
      let name = "HeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> HeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? HeaderCell
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try landing.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct landing: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = LandingController

      let bundle = R.hostingBundle
      let name = "Landing"

      static func validate() throws {
        if UIKit.UIImage(named: "ic-crackwatch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-crackwatch' is used in storyboard 'Landing', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'Landing', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let name = "LaunchScreen"

      static func validate() throws {
        if UIKit.UIImage(named: "ic-crackwatch", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'ic-crackwatch' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = GameListController

      let bundle = R.hostingBundle
      let gameInfoController = StoryboardViewControllerResource<GameInfoController>(identifier: "GameInfoController")
      let mainController = StoryboardViewControllerResource<GameListController>(identifier: "MainController")
      let name = "Main"

      func gameInfoController(_: Void = ()) -> GameInfoController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: gameInfoController)
      }

      func mainController(_: Void = ()) -> GameListController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "backgroundColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'backgroundColor' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().gameInfoController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'gameInfoController' could not be loaded from storyboard 'Main' as 'GameInfoController'.") }
        if _R.storyboard.main().mainController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainController' could not be loaded from storyboard 'Main' as 'GameListController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
